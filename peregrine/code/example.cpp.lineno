1 :      int size; // total size of data
2 :      int nthread; // total number of threads
3 :      unsigned long result = 0;
4 : 
5 :      int main(int argc, char *argv[]) {
6 :  L1:     nthread = atoi(argv[1]);
7 :  L2:     size = atoi(argv[2]);
8 :  L3:     assert(nthread>0 && size>=nthread);
9 :  L4:     for(int i=1; i<nthread; ++i)
10:  L5:         pthread_create(..., worker, NULL);
11:  L6:     worker(NULL);
12:         // NOTE: missing @pthread_join()@
13:  L7:     if(atoi(argv[3]) == 1)
14:  L8:         result += ...; // race with line @L15@
15:  L9:     printf("result = %lu\n", result); // race with line @L15@
16:          ...
17:      }
18:      void *worker(void *arg) {
19: L10:     char *data = malloc(size/nthread);
20: L11:     read(..., data, size/nthread);
21: L12:     for(int i=0; i<size/nthread; ++i)
22: L13:         data[i] = ...; // compute using @data@
23: L14:     pthread_mutex_lock(&mutex);
24: L15:     result += ...; // race with lines @L8@ and @L9@
25: L16:     pthread_mutex_unlock(&mutex);
26:          ...
27:      }
