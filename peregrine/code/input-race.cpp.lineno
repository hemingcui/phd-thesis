1 : // detect input-dependent races, and add involved dynamic instruction instances to @slicing_targets@
2 : // used by the inter-thread step. @r1@ and @r2@ are two concurrent regions
3 : void detect_input_dependent_races(r1, r2) {
4 :   for (i1, i2) in (r1, r2) { // iterate through all instruction pairs in r1, r2
5 :     if (neither i1 nor i2 is a branch instruction) {
6 :       if(mayrace(i1, i2))
7 :         { slicing_targets.add(i1); slicing_targets.add(i2); } // add @i1@ and @i2@ to slicing targets
8 :     } else if (exactly one of i1, i2 is a branch instruction) {
9 :       br = branch instruction in i1, i2;
10:       inst = the other instruction in i1, i2;
11:       nottaken = the not taken branch of br in the execution trace;
12:       if(mayrace_br(br, nottaken, inst)) {
13:         taken = the taken branch of br in trace; // add the taken branch of @br@ to slicing targets
14:         slicing_targets.add_br(br, taken);
15:       }
16:     } else { // both @i1@, @i2@ are branches
17:       nottaken1 = the not taken branch of i1 in trace;
18:       nottaken2 = the not taken branch of i2 in trace;
19:       if(mayrace_br_br(i1, nottaken1, i2, nottaken2) {
20:         taken1 = the taken branch of i1 in trace;
21:         slicing_targets.add_br(i1, taken1);
22:       }
23:     }
24:   }
25: }
26: bool mayrace(i1, i2) { return mayalias(i1, i2) && ((i1 is a store) || (i2 is a store)); }
27: bool mayrace_br(br, nottaken, inst) { // return true if the not-taken branch of @br@ may race with @inst@
28:   for i in (instructions in the nottaken branch of br)
29:     if(mayrace(i, inst)) return true;
30:   return false; }
31: // return true if the not-taken branch of @br1@ may race with the not-taken branch of @br2@
32: bool mayrace_br_br(br1, nottaken1, br2, nottaken2) {
33:   for inst in (instructions in the nottaken2 branch of br2)
34:     if(mayrace_br(br1, nottaken1, inst)) return true;
35:   return false; }
